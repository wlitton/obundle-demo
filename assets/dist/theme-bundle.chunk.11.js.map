{"version":3,"sources":["webpack:///./assets/js/theme/search.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/form-utils.js","webpack:///./assets/js/theme/common/url-utils.js","webpack:///./assets/js/theme/global/compare-products.js","webpack:///./assets/js/theme/catalog.js","webpack:///./assets/js/theme/common/faceted-search.js"],"names":["Search","formatCategoryTreeForJSTree","node","nodeData","text","data","id","metadata","state","selected","opened","children","forEach","childNode","push","showProducts","url","urlUtils","replaceParams","window","location","href","section","this","$productListingContainer","removeClass","$facetedSearchContainer","$contentResultsContainer","addClass","$","goToUrl","showContent","onReady","compareProducts","context","urls","$searchForm","$categoryTreeContainer","find","Url","parse","treeData","length","initFacetedSearch","onSortBySubmit","bind","hooks","on","collapsibleFactory","event","preventDefault","query","validator","initValidation","bindValidation","categoryTree","categoryTreeData","createCategoryTree","selectedCategoryIds","jstree","get_selected","check","remove","input","type","name","value","append","loadTreeNodes","cb","ajax","selectedCategoryId","prefix","headers","BCData","csrf_token","done","formattedResults","dataNode","$container","treeOptions","core","themes","icons","checkbox","three_state","plugins","$searchHeading","$searchCount","requestOptions","template","productListing","sidebar","heading","productCount","config","product_results","limit","searchProductsPerPage","showMore","facetedSearch","FacetedSearch","content","html","triggerHandler","animate","scrollTop","$form","nod","submit","$element","add","selector","validate","errorMessage","performCheck","areAll","CatalogPage","forms","email","test","password","notEmpty","inputTagNames","classifyForm","formSelector","options","$inputs","join","formFieldClass","each","__","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","$field","fieldId","match","getFieldId","after","Validators","setEmailValidation","field","val","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","result","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","Object","keys","classes","hasClass","getUrl","pathname","search","history","pushState","document","title","trigger","params","param","parsed","hasOwnProperty","format","buildQueryString","queryData","key","out","Array","isArray","ndx","substring","parseQueryParams","i","temp","split","updateCounterNav","counter","$link","urlContext","is","attr","compare","compareCounter","$compareLink","$checked","element","item","product","currentTarget","$clickedCompareLink","checked","index","indexOf","splice","decrementCounter","showAlertModal","queryParams","serialize","page","PageManager","callback","defaultOptions","accordionToggleSelector","blockerSelector","clearFacetSelector","componentSelector","facetNavListSelector","priceRangeErrorSelector","priceRangeFieldsetSelector","priceRangeFormSelector","priceRangeMaxPriceSelector","priceRangeMinPriceSelector","showMoreToggleSelector","facetedSearchFilterItems","modal","modalFactory","modalOpen","collapsedFacets","collapsedFacetItems","initPriceValidator","navList","collapseFacetItems","accordionToggle","collapsible","isCollapsed","targetId","setTimeout","collapseAllFacets","onStateChange","onToggleClick","onAccordionToggle","onClearFacet","onFacetClick","onRangeSubmit","filterFacetItems","bindEvents","refreshView","restoreCollapsedFacets","restoreCollapsedFacetItems","updateView","show","api","getPage","err","hide","Error","expandFacetItems","$navList","hasMoreResults","toggleFacetItems","getMoreFacetResults","facet","facetUrl","list_all","response","open","updateContent","$items","expandFacet","$accordionToggle","collapseFacet","close","expandAllFacets","priceRangeValidator","unbindEvents","off","stopPropagation","$toggle","toggleClass","constants","VALID","decodeURI"],"mappings":"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","file":"theme-bundle.chunk.11.js","sourcesContent":["import { hooks } from '@bigcommerce/stencil-utils';\nimport CatalogPage from './catalog';\nimport FacetedSearch from './common/faceted-search';\nimport compareProducts from './global/compare-products';\nimport urlUtils from './common/url-utils';\nimport Url from 'url';\nimport collapsibleFactory from './common/collapsible';\nimport 'jstree';\nimport nod from './common/nod';\n\nexport default class Search extends CatalogPage {\n    formatCategoryTreeForJSTree(node) {\n        const nodeData = {\n            text: node.data,\n            id: node.metadata.id,\n            state: {\n                selected: node.selected,\n            },\n        };\n\n        if (node.state) {\n            nodeData.state.opened = node.state === 'open';\n            nodeData.children = true;\n        }\n\n        if (node.children) {\n            nodeData.children = [];\n            node.children.forEach((childNode) => {\n                nodeData.children.push(this.formatCategoryTreeForJSTree(childNode));\n            });\n        }\n\n        return nodeData;\n    }\n\n    showProducts() {\n        const url = urlUtils.replaceParams(window.location.href, {\n            section: 'product',\n        });\n\n        this.$productListingContainer.removeClass('u-hiddenVisually');\n        this.$facetedSearchContainer.removeClass('u-hiddenVisually');\n        this.$contentResultsContainer.addClass('u-hiddenVisually');\n\n        $('[data-content-results-toggle]').removeClass('navBar-action-color--active');\n        $('[data-content-results-toggle]').addClass('navBar-action');\n\n        $('[data-product-results-toggle]').removeClass('navBar-action');\n        $('[data-product-results-toggle]').addClass('navBar-action-color--active');\n\n        urlUtils.goToUrl(url);\n    }\n\n    showContent() {\n        const url = urlUtils.replaceParams(window.location.href, {\n            section: 'content',\n        });\n\n        this.$contentResultsContainer.removeClass('u-hiddenVisually');\n        this.$productListingContainer.addClass('u-hiddenVisually');\n        this.$facetedSearchContainer.addClass('u-hiddenVisually');\n\n        $('[data-product-results-toggle]').removeClass('navBar-action-color--active');\n        $('[data-product-results-toggle]').addClass('navBar-action');\n\n        $('[data-content-results-toggle]').removeClass('navBar-action');\n        $('[data-content-results-toggle]').addClass('navBar-action-color--active');\n\n        urlUtils.goToUrl(url);\n    }\n\n    onReady() {\n        compareProducts(this.context.urls);\n\n        const $searchForm = $('[data-advanced-search-form]');\n        const $categoryTreeContainer = $searchForm.find('[data-search-category-tree]');\n        const url = Url.parse(window.location.href, true);\n        const treeData = [];\n        this.$productListingContainer = $('#product-listing-container');\n        this.$facetedSearchContainer = $('#faceted-search-container');\n        this.$contentResultsContainer = $('#search-results-content');\n\n        // Init faceted search\n        if ($('#facetedSearch').length > 0) {\n            this.initFacetedSearch();\n        } else {\n            this.onSortBySubmit = this.onSortBySubmit.bind(this);\n            hooks.on('sortBy-submitted', this.onSortBySubmit);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        $('[data-product-results-toggle]').on('click', event => {\n            event.preventDefault();\n            this.showProducts();\n        });\n\n        $('[data-content-results-toggle]').on('click', event => {\n            event.preventDefault();\n            this.showContent();\n        });\n\n        if (this.$productListingContainer.find('li.product').length === 0 || url.query.section === 'content') {\n            this.showContent();\n        } else {\n            this.showProducts();\n        }\n\n        const validator = this.initValidation($searchForm)\n            .bindValidation($searchForm.find('#search_query_adv'));\n\n        this.context.categoryTree.forEach((node) => {\n            treeData.push(this.formatCategoryTreeForJSTree(node));\n        });\n\n        this.categoryTreeData = treeData;\n        this.createCategoryTree($categoryTreeContainer);\n\n        $searchForm.on('submit', event => {\n            const selectedCategoryIds = $categoryTreeContainer.jstree().get_selected();\n\n            if (!validator.check()) {\n                return event.preventDefault();\n            }\n\n            $searchForm.find('input[name=\"category\\[\\]\"]').remove();\n\n            for (const categoryId of selectedCategoryIds) {\n                const input = $('<input>', {\n                    type: 'hidden',\n                    name: 'category[]',\n                    value: categoryId,\n                });\n\n                $searchForm.append(input);\n            }\n        });\n    }\n\n    loadTreeNodes(node, cb) {\n        $.ajax({\n            url: '/remote/v1/category-tree',\n            data: {\n                selectedCategoryId: node.id,\n                prefix: 'category',\n            },\n            headers: {\n                'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',\n            },\n        }).done(data => {\n            const formattedResults = [];\n\n            data.forEach((dataNode) => {\n                formattedResults.push(this.formatCategoryTreeForJSTree(dataNode));\n            });\n\n            cb(formattedResults);\n        });\n    }\n\n    createCategoryTree($container) {\n        const treeOptions = {\n            core: {\n                data: (node, cb) => {\n                    // Root node\n                    if (node.id === '#') {\n                        cb(this.categoryTreeData);\n                    } else {\n                        // Lazy loaded children\n                        this.loadTreeNodes(node, cb);\n                    }\n                },\n                themes: {\n                    icons: true,\n                },\n            },\n            checkbox: {\n                three_state: false,\n            },\n            plugins: [\n                'checkbox',\n            ],\n        };\n\n        $container.jstree(treeOptions);\n    }\n\n    initFacetedSearch() {\n        const $productListingContainer = $('#product-listing-container');\n        const $facetedSearchContainer = $('#faceted-search-container');\n        const $searchHeading = $('#search-results-heading');\n        const $searchCount = $('#search-results-product-count');\n        const productsPerPage = this.context.searchProductsPerPage;\n        const requestOptions = {\n            template: {\n                productListing: 'search/product-listing',\n                sidebar: 'search/sidebar',\n                heading: 'search/heading',\n                productCount: 'search/product-count',\n            },\n            config: {\n                product_results: {\n                    limit: productsPerPage,\n                },\n            },\n            showMore: 'search/show-more',\n        };\n\n        this.facetedSearch = new FacetedSearch(requestOptions, (content) => {\n            $productListingContainer.html(content.productListing);\n            $facetedSearchContainer.html(content.sidebar);\n            $searchHeading.html(content.heading);\n            $searchCount.html(content.productCount);\n\n            $('body').triggerHandler('compareReset');\n\n            $('html, body').animate({\n                scrollTop: 0,\n            }, 100);\n        });\n    }\n\n    initValidation($form) {\n        this.$form = $form;\n        this.validator = nod({\n            submit: $form,\n        });\n\n        return this;\n    }\n\n    bindValidation($element) {\n        if (this.validator) {\n            this.validator.add({\n                selector: $element,\n                validate: 'presence',\n                errorMessage: $element.data('errorMessage'),\n            });\n        }\n\n        return this;\n    }\n\n    check() {\n        if (this.validator) {\n            this.validator.performCheck();\n            return this.validator.areAll('valid');\n        }\n\n        return false;\n    }\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","import Url from 'url';\n\nconst urlUtils = {\n    getUrl: () => `${window.location.pathname}${window.location.search}`,\n\n    goToUrl: (url) => {\n        window.history.pushState({}, document.title, url);\n        $(window).trigger('statechange');\n    },\n\n    replaceParams: (url, params) => {\n        const parsed = Url.parse(url, true);\n        let param;\n\n        // Let the formatter use the query object to build the new url\n        parsed.search = null;\n\n        for (param in params) {\n            if (params.hasOwnProperty(param)) {\n                parsed.query[param] = params[param];\n            }\n        }\n\n        return Url.format(parsed);\n    },\n\n    buildQueryString: (queryData) => {\n        let out = '';\n        let key;\n        for (key in queryData) {\n            if (queryData.hasOwnProperty(key)) {\n                if (Array.isArray(queryData[key])) {\n                    let ndx;\n\n                    for (ndx in queryData[key]) {\n                        if (queryData[key].hasOwnProperty(ndx)) {\n                            out += `&${key}=${queryData[key][ndx]}`;\n                        }\n                    }\n                } else {\n                    out += `&${key}=${queryData[key]}`;\n                }\n            }\n        }\n\n        return out.substring(1);\n    },\n\n    parseQueryParams: (queryData) => {\n        const params = {};\n\n        for (let i = 0; i < queryData.length; i++) {\n            const temp = queryData[i].split('=');\n\n            if (temp[0] in params) {\n                if (Array.isArray(params[temp[0]])) {\n                    params[temp[0]].push(temp[1]);\n                } else {\n                    params[temp[0]] = [params[temp[0]], temp[1]];\n                }\n            } else {\n                params[temp[0]] = temp[1];\n            }\n        }\n\n        return params;\n    },\n};\n\nexport default urlUtils;\n","import _ from 'lodash';\nimport { showAlertModal } from './modal';\n\nfunction decrementCounter(counter, item) {\n    const index = counter.indexOf(item);\n\n    if (index > -1) {\n        counter.splice(index, 1);\n    }\n}\n\nfunction incrementCounter(counter, item) {\n    counter.push(item);\n}\n\nfunction updateCounterNav(counter, $link, urlContext) {\n    if (counter.length !== 0) {\n        if (!$link.is('visible')) {\n            $link.addClass('show');\n        }\n        $link.attr('href', `${urlContext.compare}/${counter.join('/')}`);\n        $link.find('span.countPill').html(counter.length);\n    } else {\n        $link.removeClass('show');\n    }\n}\n\nexport default function (urlContext) {\n    let compareCounter = [];\n\n    const $compareLink = $('a[data-compare-nav]');\n\n    $('body').on('compareReset', () => {\n        const $checked = $('body').find('input[name=\"products\\[\\]\"]:checked');\n\n        compareCounter = $checked.length ? _.map($checked, element => element.value) : [];\n        updateCounterNav(compareCounter, $compareLink, urlContext);\n    });\n\n    $('body').triggerHandler('compareReset');\n\n    $('body').on('click', '[data-compare-id]', event => {\n        const product = event.currentTarget.value;\n        const $clickedCompareLink = $('a[data-compare-nav]');\n\n        if (event.currentTarget.checked) {\n            incrementCounter(compareCounter, product);\n        } else {\n            decrementCounter(compareCounter, product);\n        }\n\n        updateCounterNav(compareCounter, $clickedCompareLink, urlContext);\n    });\n\n    $('body').on('submit', '[data-product-compare]', event => {\n        const $this = $(event.currentTarget);\n        const productsToCompare = $this.find('input[name=\"products\\[\\]\"]:checked');\n\n        if (productsToCompare.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            event.preventDefault();\n        }\n    });\n\n    $('body').on('click', 'a[data-compare-nav]', () => {\n        const $clickedCheckedInput = $('body').find('input[name=\"products\\[\\]\"]:checked');\n\n        if ($clickedCheckedInput.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            return false;\n        }\n    });\n}\n","import PageManager from './page-manager';\nimport urlUtils from './common/url-utils';\nimport Url from 'url';\n\nexport default class CatalogPage extends PageManager {\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\n    }\n}\n","import { hooks, api } from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport Url from 'url';\nimport urlUtils from './url-utils';\nimport modalFactory from '../global/modal';\nimport collapsibleFactory from './collapsible';\nimport { Validators } from './form-utils';\nimport nod from './nod';\n\n/**\n * Faceted search view component\n */\nclass FacetedSearch {\n    /**\n     * @param {object} requestOptions - Object with options for the ajax requests\n     * @param {function} callback - Function to execute after fetching templates\n     * @param {object} options - Configurable options\n     * @example\n     *\n     * let requestOptions = {\n     *      templates: {\n     *          productListing: 'category/product-listing',\n     *          sidebar: 'category/sidebar'\n     *     }\n     * };\n     *\n     * let templatesDidLoad = function(content) {\n     *     $productListingContainer.html(content.productListing);\n     *     $facetedSearchContainer.html(content.sidebar);\n     * };\n     *\n     * let facetedSearch = new FacetedSearch(requestOptions, templatesDidLoad);\n     */\n    constructor(requestOptions, callback, options) {\n        const defaultOptions = {\n            accordionToggleSelector: '#facetedSearch .accordion-navigation, #facetedSearch .facetedSearch-toggle',\n            blockerSelector: '#facetedSearch .blocker',\n            clearFacetSelector: '#facetedSearch .facetedSearch-clearLink',\n            componentSelector: '#facetedSearch-navList',\n            facetNavListSelector: '#facetedSearch .navList',\n            priceRangeErrorSelector: '#facet-range-form .form-inlineMessage',\n            priceRangeFieldsetSelector: '#facet-range-form .form-fieldset',\n            priceRangeFormSelector: '#facet-range-form',\n            priceRangeMaxPriceSelector: '#facet-range-form [name=max_price]',\n            priceRangeMinPriceSelector: '#facet-range-form [name=min_price]',\n            showMoreToggleSelector: '#facetedSearch .accordion-content .toggleLink',\n            facetedSearchFilterItems: '#facetedSearch-filterItems .form-input',\n            modal: modalFactory('#modal')[0],\n            modalOpen: false,\n        };\n\n        // Private properties\n        this.requestOptions = requestOptions;\n        this.callback = callback;\n        this.options = _.extend({}, defaultOptions, options);\n        this.collapsedFacets = [];\n        this.collapsedFacetItems = [];\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Show limited items by default\n        $(this.options.facetNavListSelector).each((index, navList) => {\n            this.collapseFacetItems($(navList));\n        });\n\n        // Mark initially collapsed accordions\n        $(this.options.accordionToggleSelector).each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n\n            if (collapsible.isCollapsed) {\n                this.collapsedFacets.push(collapsible.targetId);\n            }\n        });\n\n        // Collapse all facets if initially hidden\n        // NOTE: Need to execute after Collapsible gets bootstrapped\n        setTimeout(() => {\n            if ($(this.options.componentSelector).is(':hidden')) {\n                this.collapseAllFacets();\n            }\n        });\n\n        // Observe user events\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onToggleClick = this.onToggleClick.bind(this);\n        this.onAccordionToggle = this.onAccordionToggle.bind(this);\n        this.onClearFacet = this.onClearFacet.bind(this);\n        this.onFacetClick = this.onFacetClick.bind(this);\n        this.onRangeSubmit = this.onRangeSubmit.bind(this);\n        this.onSortBySubmit = this.onSortBySubmit.bind(this);\n        this.filterFacetItems = this.filterFacetItems.bind(this);\n\n        this.bindEvents();\n    }\n\n    // Public methods\n    refreshView(content) {\n        if (content) {\n            this.callback(content);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Restore view state\n        this.restoreCollapsedFacets();\n        this.restoreCollapsedFacetItems();\n\n        // Bind events\n        this.bindEvents();\n    }\n\n    updateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }\n\n    expandFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Remove\n        this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n    }\n\n    collapseFacetItems($navList) {\n        const id = $navList.attr('id');\n        const hasMoreResults = $navList.data('hasMoreResults');\n\n        if (hasMoreResults) {\n            this.collapsedFacetItems = _.union(this.collapsedFacetItems, [id]);\n        } else {\n            this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n        }\n    }\n\n    toggleFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Toggle depending on `collapsed` flag\n        if (_.includes(this.collapsedFacetItems, id)) {\n            this.getMoreFacetResults($navList);\n\n            return true;\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    getMoreFacetResults($navList) {\n        const facet = $navList.data('facet');\n        const facetUrl = urlUtils.getUrl();\n\n        if (this.requestOptions.showMore) {\n            api.getPage(facetUrl, {\n                template: this.requestOptions.showMore,\n                params: {\n                    list_all: facet,\n                },\n            }, (err, response) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                this.options.modal.open();\n                this.options.modalOpen = true;\n                this.options.modal.updateContent(response);\n            });\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    filterFacetItems(event) {\n        const $items = $('.navList-item');\n        const query = $(event.currentTarget).val().toLowerCase();\n\n        $items.each((index, element) => {\n            const text = $(element).text().toLowerCase();\n            if (text.indexOf(query) !== -1) {\n                $(element).show();\n            } else {\n                $(element).hide();\n            }\n        });\n    }\n\n    expandFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.open();\n    }\n\n    collapseFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.close();\n    }\n\n    collapseAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.collapseFacet($accordionToggle);\n        });\n    }\n\n    expandAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.expandFacet($accordionToggle);\n        });\n    }\n\n    // Private methods\n    initPriceValidator() {\n        if ($(this.options.priceRangeFormSelector).length === 0) {\n            return;\n        }\n\n        const validator = nod();\n        const selectors = {\n            errorSelector: this.options.priceRangeErrorSelector,\n            fieldsetSelector: this.options.priceRangeFieldsetSelector,\n            formSelector: this.options.priceRangeFormSelector,\n            maxPriceSelector: this.options.priceRangeMaxPriceSelector,\n            minPriceSelector: this.options.priceRangeMinPriceSelector,\n        };\n\n        Validators.setMinMaxPriceValidation(validator, selectors);\n\n        this.priceRangeValidator = validator;\n    }\n\n    restoreCollapsedFacetItems() {\n        const $navLists = $(this.options.facetNavListSelector);\n\n        // Restore collapsed state for each facet\n        $navLists.each((index, navList) => {\n            const $navList = $(navList);\n            const id = $navList.attr('id');\n            const shouldCollapse = _.includes(this.collapsedFacetItems, id);\n\n            if (shouldCollapse) {\n                this.collapseFacetItems($navList);\n            } else {\n                this.expandFacetItems($navList);\n            }\n        });\n    }\n\n    restoreCollapsedFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n            const id = collapsible.targetId;\n            const shouldCollapse = _.includes(this.collapsedFacets, id);\n\n            if (shouldCollapse) {\n                this.collapseFacet($accordionToggle);\n            } else {\n                this.expandFacet($accordionToggle);\n            }\n        });\n    }\n\n    bindEvents() {\n        // Clean-up\n        this.unbindEvents();\n\n        // DOM events\n        $(window).on('statechange', this.onStateChange);\n        $(document).on('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).on('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).on('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).on('click', this.onClearFacet);\n\n        // Hooks\n        hooks.on('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.on('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.on('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    unbindEvents() {\n        // DOM events\n        $(window).off('statechange', this.onStateChange);\n        $(document).off('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).off('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).off('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).off('click', this.onClearFacet);\n\n        // Hooks\n        hooks.off('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.off('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.off('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    onClearFacet(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Update URL\n        urlUtils.goToUrl(url);\n    }\n\n    onToggleClick(event) {\n        const $toggle = $(event.currentTarget);\n        const $navList = $($toggle.attr('href'));\n\n        // Prevent default\n        event.preventDefault();\n\n        // Toggle visible items\n        this.toggleFacetItems($navList);\n    }\n\n    onFacetClick(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n\n        $link.toggleClass('is-selected');\n\n        // Update URL\n        urlUtils.goToUrl(url);\n\n        if (this.options.modalOpen) {\n            this.options.modal.close();\n        }\n    }\n\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) }));\n    }\n\n    onRangeSubmit(event) {\n        event.preventDefault();\n\n        if (!this.priceRangeValidator.areAll(nod.constants.VALID)) {\n            return;\n        }\n\n        const url = Url.parse(window.location.href, true);\n        let queryParams = decodeURI($(event.currentTarget).serialize()).split('&');\n        queryParams = urlUtils.parseQueryParams(queryParams);\n\n        for (const key in queryParams) {\n            if (queryParams.hasOwnProperty(key)) {\n                url.query[key] = queryParams[key];\n            }\n        }\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) }));\n    }\n\n    onStateChange() {\n        this.updateView();\n    }\n\n    onAccordionToggle(event) {\n        const $accordionToggle = $(event.currentTarget);\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n        const id = collapsible.targetId;\n\n        if (collapsible.isCollapsed) {\n            this.collapsedFacets = _.union(this.collapsedFacets, [id]);\n        } else {\n            this.collapsedFacets = _.without(this.collapsedFacets, id);\n        }\n    }\n}\n\nexport default FacetedSearch;\n"],"sourceRoot":""}